{"version":3,"sources":["gameHelpers.js","components/styles/StyledCell.js","tetrominos.js","components/Cell.js","components/styles/StyledStage.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","img/bg.png","components/styles/StyledTetris.js","hooks/useStage.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","reportWebVitals.js","index.js"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledCell","styled","div","props","color","type","TETROMINOS","0","shape","I","J","L","O","S","T","Z","randomTetromino","tetrominos","randTetromino","Math","floor","random","Cell","React","memo","StyledStage","height","width","Stage","map","row","cell","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callBack","onClick","StyledTetrisWrapper","bgImage","StyledTetris","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","move","keyCode","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.548f1fde.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\nArray.from(new Array(STAGE_HEIGHT), () => new Array(STAGE_WIDTH).fill([0, 'clear']));\r\n\r\nexport const checkCollision = (player, stage, {x: moveX, y: moveY}) => {\r\n    for (let y = 0; y < player.tetromino.length; y +=1) {\r\n        for (let x = 0; x < player.tetromino[y].length; x +=1) {\r\n           \r\n            //check if we are on an actual tetromino cell\r\n            if(player.tetromino[y][x] !== 0) {\r\n                if(\r\n                // check if our move is inside area's height(y)\r\n                //shouldn't go through the bottom area\r\n                !stage[y + player.pos.y + moveY] ||\r\n                 // check if our move is inside area's width(x)\r\n                 !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n                 //check if the cell we are moving to is not set to clear\r\n                 stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\r\n            ) return true\r\n            }\r\n          \r\n        }\r\n    }\r\n    return false;\r\n}","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\nwidth: auto;\r\nbackground: rgba(${props => props.color},0.8);\r\nborder: ${props => (props.type === 0 ?'0px solid':'4px solid')};\r\nborder-bottom-color: rgba(${props => props.color},0.1);\r\nborder-right-color: rgba(${props => props.color},1);\r\nborder-left-color: rgba(${props => props.color},0.3);\r\nborder-top-color: rgba(${props => props.color},1);\r\n`","export const TETROMINOS = {\r\n    0: {shape: [[0]], color: '0, 0, 0'},\r\n    I: {shape: [\r\n        [0,'I',0,0],\r\n        [0,'I',0,0],\r\n        [0,'I',0,0],\r\n        [0,'I',0,0]\r\n    ], \r\n    color: '80, 227, 230'},\r\n    J: {shape: [\r\n       \r\n        [0,'J',0],\r\n        [0,'J',0],\r\n        ['J','J',0],\r\n        \r\n    ], \r\n    color: '36, 95, 223'},\r\n    L: {shape: [\r\n        \r\n        [0,'L',0],\r\n        [0,'L',0],\r\n        [0,'L','L']\r\n    ], \r\n    color: '223, 173, 36'},\r\n    O: {shape: [\r\n        ['O','O'],\r\n        ['O','O']\r\n    ], \r\n    color: '223, 217, 36'},\r\n    S: {shape: [\r\n        [0,'S','S'],\r\n        ['S','S',0],\r\n        [0,0,0]\r\n    ], \r\n    color: '58, 211, 56'},\r\n    T: {shape: [\r\n        ['T','T','T'],\r\n        [0,'T',0],\r\n        [0,0,0]\r\n    ], \r\n    color: '132, 61, 198'},\r\n    Z: {shape: [\r\n        ['Z','Z',0],\r\n        [0,'Z','Z'],\r\n        [0,0,0]\r\n    ], \r\n    color: '227, 78, 78'}\r\n}\r\n\r\nexport const randomTetromino = () => {\r\n    const tetrominos = 'IJLOSTZ';\r\n    const randTetromino = tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n    return TETROMINOS[randTetromino];\r\n}","import React from 'react';\r\nimport { StyledCell } from './styles/StyledCell';\r\nimport {TETROMINOS} from '../tetrominos';\r\nconst Cell = ({ type }) => (\r\n    <StyledCell type = {type} color = {TETROMINOS[type].color}/>\r\n)\r\n\r\nexport default React.memo(Cell);","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\ndisplay: grid;\r\ngrid-template-rows: repeat(\r\n    ${props => props.height},\r\n    calc(23vw/${props => props.width})\r\n);\r\ngrid-template-columns: repeat(\r\n    ${props => props.width}, 1fr\r\n);\r\ngrid-gap: 1px;\r\nborder: 2px solid #333;\r\nwidth: 100%;\r\nmax-width: 25vw;\r\nbackground: #111;\r\n`;","import React from 'react';\r\nimport Cell from './Cell';\r\nimport {StyledStage} from './styles/StyledStage';\r\n\r\nconst Stage = ({ stage }) => (\r\n    <StyledStage width = {stage[0].length} height = {stage.length}>\r\n        {stage.map(row => row.map((cell, x) => <Cell key = {x} type = {cell[0]}/>))}\r\n    </StyledStage>\r\n)\r\n\r\nexport default Stage;","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay = styled.div`\r\nbox-sizing: border-box;\r\ndisplay: flex;\r\nalign-items: center;\r\nmargin: 0 0 20px 0;\r\npadding: 20px;\r\nborder: 4px solid #333;\r\nmin-height: 30px;\r\nwidth: 100%;\r\nborder-radius: 20px;\r\ncolor: ${props => (props.gameOver?'red':'#999')};\r\nbackground: #000;\r\nfont-family: Pixel, Arial, Helvetica, sans-serif;\r\nfont-size: 0.8rem;\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {StyledDisplay} from './styles/StyledDisplay';\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n    <StyledDisplay gameOver = {gameOver}>{text}</StyledDisplay>\r\n)\r\n\r\nexport default Display;","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton = styled.button`\r\nbox-sizing: border-box;\r\nmargin: 0 0 20px 0;\r\npadding: 20px;\r\nmin-height: 30px;\r\nwidth: 100%;\r\nborder-radius: 20px;\r\nborder: none;\r\ncolor: white;\r\nbackground: #333;\r\nfont-family: Pixel, Arial, Helvetica, sans-serif;\r\nfont-size: 1rem;\r\noutline: none;\r\ncursor: pointer;\r\n`;","import React from 'react';\r\nimport {StyledStartButton} from './styles/StyledStartButton';\r\n\r\nconst StartButton = ({ callBack }) => (\r\n    <StyledStartButton onClick = {callBack}>Start Game</StyledStartButton>\r\n)\r\n\r\nexport default StartButton;","export default __webpack_public_path__ + \"static/media/bg.d63cfd51.png\";","import styled from 'styled-components';\r\nimport bgImage from '../../img/bg.png';\r\n\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\nwidth: 100vw;\r\nheight: 100vh;\r\nbackground: url(${bgImage})  #000;\r\nbackground-size: cover;\r\noverflow: hidden;\r\n`\r\n\r\nexport const StyledTetris = styled.div`\r\ndisplay: flex;\r\nalign-items: flex-start;\r\npadding: 40px;\r\nmargin: 0 auto;\r\nmax-width: 900px;\r\n\r\naside {\r\n    width: 100px;\r\n    max-width: 200px;\r\n    display: block;\r\n    padding: 0px 20 px;\r\n}\r\n`","import {useState, useEffect} from 'react';\r\nimport {createStage} from '../gameHelpers';\r\n\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n    const [stage, setStage] = useState(createStage());\r\n    const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setRowsCleared(0);\r\n\r\n        const sweepRows = newStage => newStage.reduce((ack, row) => {\r\n            if(row.findIndex(cell => cell[0] === 0) === -1) {\r\n                setRowsCleared(prev => prev + 1);\r\n                ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n                return ack;\r\n            }\r\n            ack.push(row);\r\n            return ack;\r\n        },[])\r\n\r\n        const updateStage = prevStage => {\r\n            //first flush the stage\r\n            const newStage = prevStage.map(\r\n                row => row.map(\r\n                cell => (cell[1] === 'clear' ? [0, 'clear'] : cell) \r\n            ))\r\n            //draw tetromino\r\n            player.tetromino.forEach((row, y) => {\r\n                row.forEach((value, x) => {\r\n                    if(value !== 0) {\r\n                        \r\n                        newStage[y+player.pos.y][x+player.pos.x] = [\r\n                            value,\r\n                            `${player.collided ? 'merged' : 'clear'}`\r\n                        ]\r\n                    }\r\n                })\r\n            });\r\n            //check if we collided\r\n            if(player.collided) {\r\n                resetPlayer();\r\n                return sweepRows(newStage);\r\n            }\r\n            return newStage;\r\n        }\r\n\r\n        setStage(prev => updateStage(prev));\r\n\r\n    }, [ player.collided,\r\n        player.pos.x,\r\n        player.pos.y,\r\n        player.tetromino,\r\n        resetPlayer])\r\n\r\n    return [stage, setStage, rowsCleared];\r\n}","import React, {useState} from 'react';\r\nimport {createStage, checkCollision} from '../gameHelpers';\r\n//components\r\nimport Stage from './Stage';\r\nimport Display from './Display';\r\nimport StartButton from './StartButton';\r\n//styled components\r\nimport {StyledTetrisWrapper, StyledTetris} from './styles/StyledTetris';\r\n\r\n//custom hooks\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\nimport {useInterval} from '../hooks/useInterval';\r\nimport {usePlayer} from '../hooks/usePlayer';\r\nimport {useStage} from '../hooks/useStage';\r\n\r\nconst Tetris = () => {\r\n\r\n    const [dropTime, setDropTime] = useState(null);\r\n    const [gameOver, setGameOver] = useState(false);\r\n\r\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\r\n\r\n    const movePlayer = dir => {\r\n        if(!checkCollision(player, stage, {x: dir, y: 0})) {\r\n            updatePlayerPos({x: dir, y: 0});\r\n        }\r\n    }\r\n\r\n    const startGame = () => {\r\n        //reset everything\r\n        setStage(createStage());\r\n        resetPlayer();\r\n        setGameOver(false);\r\n\r\n        setDropTime(1000);\r\n        setScore(0);\r\n        setRows(0);\r\n        setLevel(0);\r\n    }\r\n\r\n    const drop = () => {\r\n        //increase level when player has cleared 10 rows\r\n        if(rows > (level + 1) * 10) {\r\n            setLevel(prev => prev + 1);\r\n            //increase the speed\r\n            setDropTime(1000/(level + 1) + 200);\r\n\r\n        }\r\n\r\n        if(!checkCollision(player, stage, {x: 0, y: 1})) {\r\n        updatePlayerPos({x:0, y:1, collided: false});\r\n        \r\n        } else {\r\n                if(player.pos.y < 1) {\r\n            //gameOver\r\n                setGameOver(true);\r\n                setDropTime(null);\r\n        }\r\n        updatePlayerPos({x:0, y:0, collided: true});\r\n    }\r\n    }\r\n\r\n    const keyUp = ({keyCode}) => {\r\n        if(!gameOver) {\r\n            if(keyCode === 40) {\r\n                setDropTime(1000/(level + 1) + 200);\r\n            }\r\n        }\r\n    }\r\n\r\n    const dropPlayer = () => {\r\n        setDropTime(null);\r\n        drop();\r\n\r\n    }\r\n\r\n\r\n    const move = ({keyCode}) => {\r\n        if(!gameOver) {\r\n            if(keyCode === 37) {\r\n                movePlayer(-1);\r\n            } else if (keyCode === 39) {\r\n                movePlayer(1);\r\n            } else if (keyCode === 40) {\r\n                dropPlayer();\r\n            }\r\n            else if (keyCode === 38) {\r\n                playerRotate(stage, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    useInterval(() => {\r\n        drop();\r\n    },dropTime)\r\n\r\n    return (\r\n        <StyledTetrisWrapper role='button' tabIndex='0' onKeyDown={e => move(e)} onKeyUp = {keyUp}>\r\n            <StyledTetris>\r\n            <Stage stage = {stage}/>\r\n            <aside>\r\n                {gameOver?(\r\n                    <Display gameOver = {gameOver} text = {\"Game Over\"}/>\r\n                ):(\r\n                <div>\r\n                <Display text = {`Score: ${score}`}/>\r\n                <Display text = {`Rows: ${rows}`}/>\r\n                <Display text = {`Level: ${level}`}/>\r\n                </div>\r\n                )}\r\n                <StartButton callBack = {startGame}/>\r\n            </aside>\r\n            </StyledTetris>\r\n        </StyledTetrisWrapper>\r\n    )\r\n}\r\n\r\nexport default Tetris;","import {useCallback, useState} from 'react';\r\nimport { checkCollision, STAGE_WIDTH } from '../gameHelpers';\r\n\r\nimport {TETROMINOS, randomTetromino} from '../tetrominos';\r\n\r\nexport const usePlayer = () => {\r\n    const [player, setPlayer] = useState({\r\n        pos: {x: 0, y:0},\r\n        tetromino: TETROMINOS[0].shape,\r\n        collided: false\r\n    });\r\n\r\nconst rotate = (matrix, dir) => {\r\n\r\n    //make rows become columns\r\n    const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index]));\r\n\r\n    //reverse each row to get the rotated matrix\r\n    if(dir>0) return rotatedTetro.map(row => row.reverse());\r\n    return rotatedTetro.reverse();\r\n}\r\n\r\nconst playerRotate = (stage, dir) => {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n    const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n\r\n    while(checkCollision(clonedPlayer, stage, {x:0,y:0})) {\r\n        clonedPlayer.pos.x += offset;\r\n        offset = -(offset + (offset > 0? 1: -1));\r\n        if(offset > clonedPlayer.tetromino[0].length) {\r\n            rotate(clonedPlayer.tetromino, - dir);\r\n            clonedPlayer.pos.x = pos;\r\n            return;\r\n        }\r\n    }\r\n\r\n    setPlayer(clonedPlayer);\r\n\r\n}\r\n\r\nconst updatePlayerPos = ({x, y, collided}) => {\r\n   \r\n    setPlayer(prev => ({\r\n        ...prev,\r\n        \r\n        pos: {x: (prev.pos.x + x), y: (prev.pos.y + y)},\r\n        collided,\r\n      \r\n    }))\r\n}\r\n\r\nconst resetPlayer = useCallback(() => {\r\n\r\n    setPlayer({\r\n        pos: {x: STAGE_WIDTH/2 - 2, y: 0},\r\n        tetromino: randomTetromino().shape,\r\n        collided: false\r\n    })\r\n}, [])\r\n\r\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n}","import {useState, useEffect, useCallback} from 'react';\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n    const [score, setScore] = useState(0);\r\n    const [rows, setRows] = useState(0);\r\n    const [level, setLevel] = useState(0);\r\n\r\n    const linePoints = [40, 100, 300, 1200];\r\n\r\n    const calcScore = useCallback(() => {\r\n        //if we have score\r\n        if (rowsCleared > 0) {\r\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n            setRows(prev => prev + rowsCleared);\r\n        }\r\n    },[level, linePoints, rowsCleared]);\r\n\r\n    useEffect(() => {\r\n        calcScore();\r\n\r\n    },[calcScore, rowsCleared, score])\r\n\r\n    return [score, setScore, rows, setRows, level, setLevel];\r\n}","import { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n}","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className = 'App'>\n    <Tetris/>\n  </div>\n)\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}